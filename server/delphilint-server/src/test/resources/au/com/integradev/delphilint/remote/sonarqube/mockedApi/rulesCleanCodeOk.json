{
  "total": 3,
  "p": 1,
  "ps": 500,
  "rules": [
    {
      "key": "community-delphi:DestructorWithoutInherited",
      "name": "Destructors should contain an 'inherited' statement",
      "htmlDesc": "<p>\n  Destructors should contain an 'inherited' statement. This also includes common destructor-like\n  methods like Deinit and Teardown.\n</p>",
      "severity": "MAJOR",
      "type": "BUG",
      "cleanCodeAttributeCategory": "INTENTIONAL",
      "cleanCodeAttribute": "CLEAR",
      "impacts": [
        {
          "softwareQuality": "MAINTAINABILITY",
          "severity": "HIGH"
        },
        {
          "softwareQuality": "SECURITY",
          "severity": "LOW"
        }
      ]
    },
    {
      "key": "community-delphi:InlineLoopVarExplicitType",
      "name": "Inline loop var declarations should not use type inference",
      "htmlDesc": "<p>\n  Inline loop var declarations can omit the type and allow the compiler to infer it.\n  <br />\n  <br />\n  There are a few downsides to using this feature:\n  <br />\n  - Lack of type information can make code harder to follow and understand at a glance.\n  <br />\n  - Type expansion that occurs during type inference can lead to unexpected inferred types.\n  <br />\n  - Wrapper types relying on implicit type conversions will not have those conversions invoked.\n  <br />\n  <br />\n  <b>See:</b>\n  <br />\n  -\n  <a\n    href=\"http://docwiki.embarcadero.com/RADStudio/en/Inline_Variable_Declaration#Type_Inference_for_Inlined_Variables\"\n  >\n    Type Inference for Inlined Variables\n  </a>\n</p>\n<pre>\n    \n<b>procedure</b> Example;\n<b>begin</b>\n  <b>for</b> <b>var</b> I := 1 to 100 do <b>Continue</b>; // Noncompliant\n  <b>for</b> <b>var</b> I: Integer := 1 to 100 do <b>Continue</b>; // Compliant\n<b>end</b>;\n        \n</pre>",
      "severity": "MAJOR",
      "type": "CODE_SMELL",
      "cleanCodeAttributeCategory": "INTENTIONAL",
      "cleanCodeAttribute": "CLEAR",
      "impacts": [
        {
          "softwareQuality": "MAINTAINABILITY",
          "severity": "MEDIUM"
        }
      ]
    },
    {
      "key": "community-delphi:InlineVarExplicitType",
      "name": "Inline var declarations should not use type inference",
      "htmlDesc": "<p>\n  Inline var declarations can omit the type and allow the compiler to infer it.\n  <br />\n  <br />\n  There are a few downsides to using this feature:\n  <br />\n  - Lack of type information can make code harder to follow and understand at a glance.\n  <br />\n  - Type expansion that occurs during type inference can lead to unexpected inferred types.\n  <br />\n  - Wrapper types relying on implicit type conversions will not have those conversions invoked.\n  <br />\n  <br />\n  <b>See:</b>\n  <br />\n  -\n  <a\n    href=\"http://docwiki.embarcadero.com/RADStudio/en/Inline_Variable_Declaration#Type_Inference_for_Inlined_Variables\"\n  >\n    Type Inference for Inlined Variables\n  </a>\n</p>\n<pre>\n    \n<b>procedure</b> Example;\n<b>begin</b>\n  <b>var</b> Foo := 123; // Noncompliant\n  <b>var</b> Bar: Integer := 123; // Compliant\n<b>end</b>;\n        \n</pre>",
      "severity": "MAJOR",
      "type": "CODE_SMELL",
      "cleanCodeAttributeCategory": "INTENTIONAL",
      "cleanCodeAttribute": "CLEAR",
      "impacts": [
        {
          "softwareQuality": "MAINTAINABILITY",
          "severity": "MEDIUM"
        }
      ]
    }
  ],
  "paging": {
    "pageIndex": 1,
    "pageSize": 500,
    "total": 3
  }
}